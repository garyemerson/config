" Garrett Mohammadioun
"
" This .vimrc file includes many settings aimed to optimize vim
" for efficient programming and/or general text editting
"
set nocompatible " Use Vim settings, rather than Vi settings

" Clear all other autocommands
autocmd!

" TODO: Not working
"   - Whenever this is uncommented vim starts up as though c was pressed and
"     therefore the first attempt to navigate file could possibly delete text
"     and will put you in insert mode.
"   - For some reason it seems the ESC key is pressed on startup and therefore
"     :noh is executed
" In normal mode, map ESC to :nohlsearch so when
" pressed (ESC) searches are temporarily cleared
"nnoremap <Esc> :noh<CR><Esc>

" Clear searches easier
noremap <silent> \ :noh<CR>

" Enter command-line easier
noremap <Space> :

" Stop using colon bruh
noremap : <Nop>

" Add mappings to move cursor 10 lines up/down to make navigation a bit easier
noremap <C-j> 10j
noremap <C-k> 10k

" Shortcut for opening new tab
noremap <C-n> :tabedit .<CR>

" Prevent accidentily entering Ex mode. Nobody actually wants to be in Ex mode.
nnoremap Q <Nop>

" Mapping that also clears the command-line when CTRL-C is press. Mapping to
" :<C-c> doesn't work because for some reason when in Operator pending mode for
" the c operator, this mapping will leave you in insert mode instead of bringing
" you back to normal mode like a user would expect.
"" TODO: pressing r in normal mode and then CTRL-C to exit operator-pending
"" mode inserts  character

" Mapping for operator-pending mode
"onoremap <C-c> <C-c>:<C-c>
" Mapping for Normal mode
"nnoremap <C-c> :<C-c>
" Mapping for Visual and Select modes
"vnoremap <C-c> :<C-c>
" Map the escape key to do nothing in order to train oneself to use CTRL-C
" instead since it's probably better not to reach so far from home (row)
"noremap <ESC> <Nop>
"noremap! <ESC> <Nop>

" Attempt to temporarily fix the issue with entering vim in the middle of a 2c
" operation when mapping the escape
"autocmd VimEnter * :execute "normal "

"set showtabline=2              " Always show tabline
"set nowrapscan                 " Don't wrap search at the end or beginning of file
set hlsearch                    " Always highlight search
set ttimeoutlen=0               " Eliminate the delay when hitting the ESC key in visual mode, command mode etc
set lazyredraw                  " Redraw the screen less often to increase speed
set ruler                       " Show the cursor position all the time
set rulerformat=%21(%m\ %l,%c%V%=%P%)   " Determine what the ruler in the bottom right displays
set showcmd                     " Show (partial) commands on the last line of the screen.
set showmatch                   " Show matching brackets, braces and parentheses
set ignorecase                  " Ignore case when searching
set backspace=2                 " Backspace over everything
set formatoptions+=ro           " Auto-insert comments leaders
set autoindent                  " Set autoindent on
set display+=lastline           " As much as possible of the last line in a window will be displayed
set number                      " Show line numbers
set scrolloff=1                 " always show one line above/below cursor
"set expandtab                   " Use spaces instead of tabs
set tabstop=4                   " Set tab widths
set shiftwidth=4                " Set width of indentation
set softtabstop=4               " Make backspacing over tabs delete the whole tab when
                                " expandtab is set (i.e. when using spaces instead of tabs)

" gVim will sometimes startup with an excessively large window. Let's not do that.
if has("gui_running")
    set lines=50 columns=100
endif

"--------------------------------Color Changes--------------------------------"
"" NOTE: These color changes have now been incorporated into a colorscheme
"" file, as that seems the most appropriate place to put them.

" Autocommand that highlights the CursorLine a specific way AFTER the
" colorscheme has been loaded so it's not overridden by the colorscheme file
"autocmd VimEnter * highlight CursorLine gui=NONE guibg=black guifg=NONE cterm=NONE ctermbg=black ctermfg=NONE
"highlight CursorLine gui=NONE guibg=black guifg=NONE cterm=NONE ctermbg=black ctermfg=NONE

" Autocommand that highlights the CursorLine a specific way AFTER the
" colorscheme has been loaded
"autocmd ColorScheme * highlight CursorLine gui=NONE guibg=black guifg=NONE cterm=NONE ctermbg=black ctermfg=NONE

" Highlight Visual regions in a transparent-like manner
"autocmd VimEnter * highlight Visual term=reverse cterm=NONE ctermbg=240 ctermfg=NONE gui=NONE guibg=#505050 guifg=NONE

" Highlight the line numbers in a subtle gray, trying to discact the reader
"autocmd VimEnter * highlight LineNr term=reverse cterm=NONE ctermbg=NONE ctermfg=245 gui=NONE guibg=#8a8a8a guifg=NONE
"--------------------------------Color Changes--------------------------------"

" Highlight the cursorline.
"" NOTE: Setting cursorline can sometimes slow down scrolling significantly and
"" general navigation in reguler (terminal) vim. As of now, this setting is
"" only used with the gui because it seems to be less effected.
if has("gui_running")
    set cursorline
endif

" Set colorscheme
"
if has("gui_running")
    colorscheme sublime
else
    colorscheme sublime
endif

" TODO: Add portablility (i.e. when different amount of colors is available)
set t_Co=256 " Use 256 colors

" Only use colors if you have colors
if &t_Co > 2 || has("gui_running")
    syntax on
endif

" Make a more minimalistic gui window
"
set guioptions-=m " Remove gui menu bar
set guioptions-=T " Remove gui toolbar
set guioptions-=r " Remove gui right scrollbar

" Highlight extra spaces and tabs
"
autocmd ColorScheme * highlight OCD ctermbg=gray guibg=gray

if exists("*matchadd")
    autocmd BufRead,BufNew * call matchadd('OCD', '\s\+$\| \+\ze\t')
    "autocmd BufRead,BufNew * echom "autocmd run"
else
    autocmd BufRead,BufNew * match OCD /\s\+$\| \+\ze\t/
    "autocmd BufRead,BufNew * echom "autocmd run"
endif

